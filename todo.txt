workplan modular rclc-Executor

step 1:

library:
- configuration subscription with thread-priority
- spin-some
- create-wait-set
- rclc-execute 
- spin

unit tests:
- create single threaded Executor 
- create multi-threaded Executor 

rclc-examples 
- timer+subscription (single threaded)
- timer+subscription (multi-threaded)
- how to set priorities in VM machine?



Vorgehen: 
jede Funktion (siehe unten:14 stück) durchgehen
- analysieren, was da passiert, was in single-threaded/multi-threaded/POSIX anders ist => dokumentieren (kleine Tabelle als markdown).
- notwendige Zusatzfunktion f definieren
- für single_threaded/multi_threaded/AUTOSAR-like definieren 

- test-Anwendung in examples schreiben (timer, subscription) für single-threaded executor 
- test-Anwendung in examples schreiben (timer, subscription) für multi-threaded executor 

KRITERIUM:
- beide Andwendungen laufen
- bei multi-threaded sich auch die Prios auf Linux anzeigen lassen und dann Unterschiede verdeutlichen (ping-pong Beispiel)
- unit tests für multi-threaded hinzugefügt

rclc/executor.c 
------------------------------------------------------------
DONE rclc_executor_init()

focus:
rclc_executor_add_subscription
rclc_executor_add_timer
_rclc_check_for_new_data
_rclc_take_new_data
_rclc_check_handle_data_available
_rclc_execute
_rclc_default_scheduling
_rclc_let_scheduling
rclc_executor_prepare
rclc_executor_rebuild_wait_set_
rclc_executor_spin_some
rclc_executor_spin
rclc_executor_fini

data structures in handle and executors

later:
rclc_executor_set_timeout
rclc_executor_set_semantics

rclc_executor_add_subscription_with_context
rclc_executor_add_client
rclc_executor_add_client_with_request_id
rclc_executor_add_service
rclc_executor_add_service_with_context
rclc_executor_add_service_with_request_id
rclc_executor_add_guard_condition
rclc_executor_add_action_client
rclc_executor_add_action_server

_rclc_executor_remove_handle
_rclc_executor_find_handle

rclc_executor_remove_subscription
rclc_executor_remove_timer
rclc_executor_remove_client
rclc_executor_remove_service
rclc_executor_remove_guard_condition

rclc_executor_set_trigger
rclc_executor_trigger_all
rclc_executor_trigger_any
rclc_executor_trigger_one
rclc_executor_trigger_always

rclc_executor_spin_one_period
rclc_executor_spin_period


rclc/single_threaded_executor.c 
------------------------------------------------------------
DONE rclc_single_threaded_executor_configure(rclc_executor_t * executor)
TODO rclc_multi_threaded_executor_init(rclc_executor_t * executor)
DONE rclc_single_threaded_executor_spin_init(rclc_executor_t * executor)



rclc_multi_threaded_executor/src/multi_threaded_executor.c
------------------------------------------------------------


DONE rclc_multi_threaded_executor_configure(rclc_executor_t * executor)

DONE rclc_multi_threaded_executor_spin_init(rclc_executor_t * executor)
DONE rclc_multi_threaded_executor_subscription_set_sched_param()




step 2: 
- extend for autosar-like OS
- mock-up of periodic-tasks in Linux



step 3: 
- extend for all other functions


